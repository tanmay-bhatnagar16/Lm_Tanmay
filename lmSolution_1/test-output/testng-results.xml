<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="22" passed="22">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="6336" started-at="2019-01-17T06:08:31Z" finished-at="2019-01-17T06:08:37Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="6336" started-at="2019-01-17T06:08:31Z" finished-at="2019-01-17T06:08:37Z">
      <class name="lm.lmSolution.FetchOrderTests">
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.FetchOrderTests@5ae9a829]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-01-17T11:38:34Z" finished-at="2019-01-17T11:38:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.FetchOrderTests.TestCase_Fetch_Order_VerifyStatusCode_InvalidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Fetch_Order_VerifyStatusCode_InvalidID()[pri:0, instance:lm.lmSolution.FetchOrderTests@5ae9a829]" name="TestCase_Fetch_Order_VerifyStatusCode_InvalidID" duration-ms="260" started-at="2019-01-17T11:38:34Z" finished-at="2019-01-17T11:38:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Fetch_Order_VerifyStatusCode_InvalidID -->
        <test-method status="PASS" signature="TestCase_Fetch_Order_VerifyStatusCode_ValidID()[pri:0, instance:lm.lmSolution.FetchOrderTests@5ae9a829]" name="TestCase_Fetch_Order_VerifyStatusCode_ValidID" duration-ms="221" started-at="2019-01-17T11:38:34Z" finished-at="2019-01-17T11:38:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Fetch_Order_VerifyStatusCode_ValidID -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.FetchOrderTests@5ae9a829]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:34Z" finished-at="2019-01-17T11:38:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.FetchOrderTests.TestCase_Fetch_Order_VerifyStatusCode_ValidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.FetchOrderTests@5ae9a829]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:34Z" finished-at="2019-01-17T11:38:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Fetch_Order_VerifyStatusCode_InvalidID status=SUCCESS method=FetchOrderTests.TestCase_Fetch_Order_VerifyStatusCode_InvalidID()[pri:0, instance:lm.lmSolution.FetchOrderTests@5ae9a829] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.FetchOrderTests@5ae9a829]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:35Z" finished-at="2019-01-17T11:38:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Fetch_Order_VerifyStatusCode_ValidID status=SUCCESS method=FetchOrderTests.TestCase_Fetch_Order_VerifyStatusCode_ValidID()[pri:0, instance:lm.lmSolution.FetchOrderTests@5ae9a829] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- lm.lmSolution.FetchOrderTests -->
      <class name="lm.lmSolution.DriverCompleteOrderTests">
        <test-method status="PASS" signature="TestCase_Complete_Order_VerifyStatusCode_ValidID()[pri:0, instance:lm.lmSolution.DriverCompleteOrderTests@2344fc66]" name="TestCase_Complete_Order_VerifyStatusCode_ValidID" duration-ms="206" started-at="2019-01-17T11:38:35Z" finished-at="2019-01-17T11:38:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Complete_Order_VerifyStatusCode_ValidID -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.DriverCompleteOrderTests@2344fc66]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:35Z" finished-at="2019-01-17T11:38:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.DriverCompleteOrderTests.TestCase_Complete_Order_VerifyStatusCode_ValidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.DriverCompleteOrderTests@2344fc66]" name="afterMethod" is-config="true" duration-ms="1" started-at="2019-01-17T11:38:36Z" finished-at="2019-01-17T11:38:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Complete_Order_VerifyStatusCode_ValidID status=SUCCESS method=DriverCompleteOrderTests.TestCase_Complete_Order_VerifyStatusCode_ValidID()[pri:0, instance:lm.lmSolution.DriverCompleteOrderTests@2344fc66] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="TestCase_VerifyStatusCode_InvalidFlow()[pri:0, instance:lm.lmSolution.DriverCompleteOrderTests@2344fc66]" name="TestCase_VerifyStatusCode_InvalidFlow" duration-ms="208" started-at="2019-01-17T11:38:36Z" finished-at="2019-01-17T11:38:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_VerifyStatusCode_InvalidFlow -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.DriverCompleteOrderTests@2344fc66]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:36Z" finished-at="2019-01-17T11:38:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.DriverCompleteOrderTests.TestCase_VerifyStatusCode_InvalidFlow()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.DriverCompleteOrderTests@2344fc66]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:36Z" finished-at="2019-01-17T11:38:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_VerifyStatusCode_InvalidFlow status=SUCCESS method=DriverCompleteOrderTests.TestCase_VerifyStatusCode_InvalidFlow()[pri:0, instance:lm.lmSolution.DriverCompleteOrderTests@2344fc66] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.DriverCompleteOrderTests@2344fc66]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:36Z" finished-at="2019-01-17T11:38:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.DriverCompleteOrderTests.TestCase_VerifyStatusCode_InvalidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_VerifyStatusCode_InvalidID()[pri:0, instance:lm.lmSolution.DriverCompleteOrderTests@2344fc66]" name="TestCase_VerifyStatusCode_InvalidID" duration-ms="218" started-at="2019-01-17T11:38:36Z" finished-at="2019-01-17T11:38:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_VerifyStatusCode_InvalidID -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.DriverCompleteOrderTests@2344fc66]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:36Z" finished-at="2019-01-17T11:38:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_VerifyStatusCode_InvalidID status=SUCCESS method=DriverCompleteOrderTests.TestCase_VerifyStatusCode_InvalidID()[pri:0, instance:lm.lmSolution.DriverCompleteOrderTests@2344fc66] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- lm.lmSolution.DriverCompleteOrderTests -->
      <class name="lm.lmSolution.PlaceOrderTests">
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="beforeMethod" is-config="true" duration-ms="6" started-at="2019-01-17T11:38:31Z" finished-at="2019-01-17T11:38:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.PlaceOrderTests.Testcase_placeAdvanceOrder_VerifyId()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Testcase_placeAdvanceOrder_VerifyId()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="Testcase_placeAdvanceOrder_VerifyId" duration-ms="1288" started-at="2019-01-17T11:38:31Z" finished-at="2019-01-17T11:38:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeAdvanceOrder_VerifyId -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:32Z" finished-at="2019-01-17T11:38:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeAdvanceOrder_VerifyId status=SUCCESS method=PlaceOrderTests.Testcase_placeAdvanceOrder_VerifyId()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="Testcase_placeAdvanceOrder_verifyDistancesCount()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="Testcase_placeAdvanceOrder_verifyDistancesCount" duration-ms="220" started-at="2019-01-17T11:38:32Z" finished-at="2019-01-17T11:38:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeAdvanceOrder_verifyDistancesCount -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:32Z" finished-at="2019-01-17T11:38:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.PlaceOrderTests.Testcase_placeAdvanceOrder_verifyDistancesCount()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:32Z" finished-at="2019-01-17T11:38:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeAdvanceOrder_verifyDistancesCount status=SUCCESS method=PlaceOrderTests.Testcase_placeAdvanceOrder_verifyDistancesCount()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:32Z" finished-at="2019-01-17T11:38:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.PlaceOrderTests.Testcase_placeAdvanceOrder_verifyFareAboveTwoKms()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Testcase_placeAdvanceOrder_verifyFareAboveTwoKms()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="Testcase_placeAdvanceOrder_verifyFareAboveTwoKms" duration-ms="234" started-at="2019-01-17T11:38:32Z" finished-at="2019-01-17T11:38:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeAdvanceOrder_verifyFareAboveTwoKms -->
        <test-method status="PASS" signature="Testcase_placeAdvanceOrder_verifyFareAboveTwoKms_NightCharges()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="Testcase_placeAdvanceOrder_verifyFareAboveTwoKms_NightCharges" duration-ms="238" started-at="2019-01-17T11:38:33Z" finished-at="2019-01-17T11:38:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeAdvanceOrder_verifyFareAboveTwoKms_NightCharges -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:33Z" finished-at="2019-01-17T11:38:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeAdvanceOrder_verifyFareAboveTwoKms status=SUCCESS method=PlaceOrderTests.Testcase_placeAdvanceOrder_verifyFareAboveTwoKms()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:33Z" finished-at="2019-01-17T11:38:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.PlaceOrderTests.Testcase_placeAdvanceOrder_verifyFareAboveTwoKms_NightCharges()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:33Z" finished-at="2019-01-17T11:38:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeAdvanceOrder_verifyFareAboveTwoKms_NightCharges status=SUCCESS method=PlaceOrderTests.Testcase_placeAdvanceOrder_verifyFareAboveTwoKms_NightCharges()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-01-17T11:38:33Z" finished-at="2019-01-17T11:38:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.PlaceOrderTests.Testcase_placeAdvanceOrder_verifyFareBelowTwoKms()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Testcase_placeAdvanceOrder_verifyFareBelowTwoKms()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="Testcase_placeAdvanceOrder_verifyFareBelowTwoKms" duration-ms="167" started-at="2019-01-17T11:38:33Z" finished-at="2019-01-17T11:38:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeAdvanceOrder_verifyFareBelowTwoKms -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:33Z" finished-at="2019-01-17T11:38:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.PlaceOrderTests.Testcase_placeAdvanceOrder_verifyFareBelowTwoKms_NightCharges()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:33Z" finished-at="2019-01-17T11:38:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeAdvanceOrder_verifyFareBelowTwoKms status=SUCCESS method=PlaceOrderTests.Testcase_placeAdvanceOrder_verifyFareBelowTwoKms()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="Testcase_placeAdvanceOrder_verifyFareBelowTwoKms_NightCharges()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="Testcase_placeAdvanceOrder_verifyFareBelowTwoKms_NightCharges" duration-ms="253" started-at="2019-01-17T11:38:33Z" finished-at="2019-01-17T11:38:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeAdvanceOrder_verifyFareBelowTwoKms_NightCharges -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:33Z" finished-at="2019-01-17T11:38:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.PlaceOrderTests.Testcase_placeOrder_verifyDistancesCount()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:33Z" finished-at="2019-01-17T11:38:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeAdvanceOrder_verifyFareBelowTwoKms_NightCharges status=SUCCESS method=PlaceOrderTests.Testcase_placeAdvanceOrder_verifyFareBelowTwoKms_NightCharges()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="Testcase_placeOrder_verifyDistancesCount()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="Testcase_placeOrder_verifyDistancesCount" duration-ms="231" started-at="2019-01-17T11:38:33Z" finished-at="2019-01-17T11:38:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeOrder_verifyDistancesCount -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:33Z" finished-at="2019-01-17T11:38:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.PlaceOrderTests.Testcase_placeOrder_verifyFareAboveTwoKms()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:33Z" finished-at="2019-01-17T11:38:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeOrder_verifyDistancesCount status=SUCCESS method=PlaceOrderTests.Testcase_placeOrder_verifyDistancesCount()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="Testcase_placeOrder_verifyFareAboveTwoKms()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="Testcase_placeOrder_verifyFareAboveTwoKms" duration-ms="232" started-at="2019-01-17T11:38:33Z" finished-at="2019-01-17T11:38:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeOrder_verifyFareAboveTwoKms -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:34Z" finished-at="2019-01-17T11:38:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeOrder_verifyFareAboveTwoKms status=SUCCESS method=PlaceOrderTests.Testcase_placeOrder_verifyFareAboveTwoKms()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:34Z" finished-at="2019-01-17T11:38:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.PlaceOrderTests.Testcase_placeOrder_verifyFareBelowTwoKms()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Testcase_placeOrder_verifyFareBelowTwoKms()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="Testcase_placeOrder_verifyFareBelowTwoKms" duration-ms="232" started-at="2019-01-17T11:38:34Z" finished-at="2019-01-17T11:38:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeOrder_verifyFareBelowTwoKms -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="afterMethod" is-config="true" duration-ms="1" started-at="2019-01-17T11:38:34Z" finished-at="2019-01-17T11:38:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeOrder_verifyFareBelowTwoKms status=SUCCESS method=PlaceOrderTests.Testcase_placeOrder_verifyFareBelowTwoKms()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="Testcase_placeOrder_verifyID()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="Testcase_placeOrder_verifyID" duration-ms="238" started-at="2019-01-17T11:38:34Z" finished-at="2019-01-17T11:38:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeOrder_verifyID -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:34Z" finished-at="2019-01-17T11:38:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.PlaceOrderTests.Testcase_placeOrder_verifyID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:34Z" finished-at="2019-01-17T11:38:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeOrder_verifyID status=SUCCESS method=PlaceOrderTests.Testcase_placeOrder_verifyID()[pri:0, instance:lm.lmSolution.PlaceOrderTests@573f2bb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- lm.lmSolution.PlaceOrderTests -->
      <class name="lm.lmSolution.DriverTakeOrderTests">
        <test-method status="PASS" signature="TestCase_Take_Order_VerifyStatusCode_InvalidFlow()[pri:0, instance:lm.lmSolution.DriverTakeOrderTests@548b7f67]" name="TestCase_Take_Order_VerifyStatusCode_InvalidFlow" duration-ms="239" started-at="2019-01-17T11:38:35Z" finished-at="2019-01-17T11:38:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Take_Order_VerifyStatusCode_InvalidFlow -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.DriverTakeOrderTests@548b7f67]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:35Z" finished-at="2019-01-17T11:38:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.DriverTakeOrderTests.TestCase_Take_Order_VerifyStatusCode_InvalidFlow()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.DriverTakeOrderTests@548b7f67]" name="afterMethod" is-config="true" duration-ms="1" started-at="2019-01-17T11:38:35Z" finished-at="2019-01-17T11:38:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Take_Order_VerifyStatusCode_InvalidFlow status=SUCCESS method=DriverTakeOrderTests.TestCase_Take_Order_VerifyStatusCode_InvalidFlow()[pri:0, instance:lm.lmSolution.DriverTakeOrderTests@548b7f67] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.DriverTakeOrderTests@548b7f67]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:35Z" finished-at="2019-01-17T11:38:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.DriverTakeOrderTests.TestCase_Take_Order_VerifyStatusCode_InvalidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Take_Order_VerifyStatusCode_InvalidID()[pri:0, instance:lm.lmSolution.DriverTakeOrderTests@548b7f67]" name="TestCase_Take_Order_VerifyStatusCode_InvalidID" duration-ms="289" started-at="2019-01-17T11:38:35Z" finished-at="2019-01-17T11:38:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Take_Order_VerifyStatusCode_InvalidID -->
        <test-method status="PASS" signature="TestCase_Take_Order_VerifyStatusCode_ValidID()[pri:0, instance:lm.lmSolution.DriverTakeOrderTests@548b7f67]" name="TestCase_Take_Order_VerifyStatusCode_ValidID" duration-ms="244" started-at="2019-01-17T11:38:35Z" finished-at="2019-01-17T11:38:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Take_Order_VerifyStatusCode_ValidID -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.DriverTakeOrderTests@548b7f67]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:35Z" finished-at="2019-01-17T11:38:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.DriverTakeOrderTests.TestCase_Take_Order_VerifyStatusCode_ValidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.DriverTakeOrderTests@548b7f67]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:35Z" finished-at="2019-01-17T11:38:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Take_Order_VerifyStatusCode_InvalidID status=SUCCESS method=DriverTakeOrderTests.TestCase_Take_Order_VerifyStatusCode_InvalidID()[pri:0, instance:lm.lmSolution.DriverTakeOrderTests@548b7f67] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.DriverTakeOrderTests@548b7f67]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:35Z" finished-at="2019-01-17T11:38:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Take_Order_VerifyStatusCode_ValidID status=SUCCESS method=DriverTakeOrderTests.TestCase_Take_Order_VerifyStatusCode_ValidID()[pri:0, instance:lm.lmSolution.DriverTakeOrderTests@548b7f67] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- lm.lmSolution.DriverTakeOrderTests -->
      <class name="lm.lmSolution.CancelOrderTests">
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.CancelOrderTests@6d8a00e3]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:36Z" finished-at="2019-01-17T11:38:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.CancelOrderTests.TestCase_Cancel_Order_VerifyStatusCode_InvalidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Cancel_Order_VerifyStatusCode_InvalidID()[pri:0, instance:lm.lmSolution.CancelOrderTests@6d8a00e3]" name="TestCase_Cancel_Order_VerifyStatusCode_InvalidID" duration-ms="312" started-at="2019-01-17T11:38:36Z" finished-at="2019-01-17T11:38:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Cancel_Order_VerifyStatusCode_InvalidID -->
        <test-method status="PASS" signature="TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterPlaceOrder()[pri:0, instance:lm.lmSolution.CancelOrderTests@6d8a00e3]" name="TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterPlaceOrder" duration-ms="248" started-at="2019-01-17T11:38:36Z" finished-at="2019-01-17T11:38:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterPlaceOrder -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.CancelOrderTests@6d8a00e3]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:36Z" finished-at="2019-01-17T11:38:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Cancel_Order_VerifyStatusCode_InvalidID status=SUCCESS method=CancelOrderTests.TestCase_Cancel_Order_VerifyStatusCode_InvalidID()[pri:0, instance:lm.lmSolution.CancelOrderTests@6d8a00e3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.CancelOrderTests@6d8a00e3]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:36Z" finished-at="2019-01-17T11:38:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.CancelOrderTests.TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterPlaceOrder()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.CancelOrderTests@6d8a00e3]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-01-17T11:38:37Z" finished-at="2019-01-17T11:38:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.CancelOrderTests.TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterTakeOrder()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.CancelOrderTests@6d8a00e3]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:37Z" finished-at="2019-01-17T11:38:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterPlaceOrder status=SUCCESS method=CancelOrderTests.TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterPlaceOrder()[pri:0, instance:lm.lmSolution.CancelOrderTests@6d8a00e3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterTakeOrder()[pri:0, instance:lm.lmSolution.CancelOrderTests@6d8a00e3]" name="TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterTakeOrder" duration-ms="248" started-at="2019-01-17T11:38:37Z" finished-at="2019-01-17T11:38:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterTakeOrder -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.lmSolution.CancelOrderTests@6d8a00e3]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-01-17T11:38:37Z" finished-at="2019-01-17T11:38:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.lmSolution.CancelOrderTests.TestCase_cancel_Order_VerifyStatusCode_InvalidFlow()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.CancelOrderTests@6d8a00e3]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-17T11:38:37Z" finished-at="2019-01-17T11:38:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterTakeOrder status=SUCCESS method=CancelOrderTests.TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterTakeOrder()[pri:0, instance:lm.lmSolution.CancelOrderTests@6d8a00e3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="TestCase_cancel_Order_VerifyStatusCode_InvalidFlow()[pri:0, instance:lm.lmSolution.CancelOrderTests@6d8a00e3]" name="TestCase_cancel_Order_VerifyStatusCode_InvalidFlow" duration-ms="263" started-at="2019-01-17T11:38:37Z" finished-at="2019-01-17T11:38:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_cancel_Order_VerifyStatusCode_InvalidFlow -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.lmSolution.CancelOrderTests@6d8a00e3]" name="afterMethod" is-config="true" duration-ms="1" started-at="2019-01-17T11:38:37Z" finished-at="2019-01-17T11:38:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_cancel_Order_VerifyStatusCode_InvalidFlow status=SUCCESS method=CancelOrderTests.TestCase_cancel_Order_VerifyStatusCode_InvalidFlow()[pri:0, instance:lm.lmSolution.CancelOrderTests@6d8a00e3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- lm.lmSolution.CancelOrderTests -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
